# kickcfg script - Author - Gareth Lee
# 		 - Update - Sean McConkey

# Set variables
BUILDDIR=/var/www/html/builds
PXE=/var/www/html/pxefiles
KSFILES=ksfiles
TFTP=/tftpboot/pxelinux.cfg
SERVER=$(echo $1 | tr A-Z a-z)   # Convert to lower case
BUILD=$(echo $2 | tr A-Z a-z)   # Convert to lower case 
CUSTOMER=$(echo $3 | tr A-Z a-z)   # Convert to lower case
OS=$4
OS2=$(grep url /var/www/html/ksfiles/$3/$2.cfg | awk -Fimages/ '{print $2}' |sed  's;\.;;g')


if [ $# != 4 ] ; then
    if [ "$3" != generic ] ; then 
        echo "usage is #kickcfg {server} {build} {customer} {os}"
        exit
    else
        OS=$BUILD
    fi
fi

#if [ $OS != $OS2 ] ; then
#    echo "looks like customer has upgraded since last time, before they were using $OS2. check which version is actually is and if its the newer one, youll need to run ksupdate, eg #ksupdate $2 $3 $4 (note - i havent written this yet, so you could just go edit /var/www/html/ksfiles/$3/$2.cfg for now but be careful if its a major upgrade rather than a minor"
#    exit
#fi


 

changeit () #{{{
{
 echo $ADDRESS | tr \- \:
} #}}}

lowercase() #{{{
{
  echo ${1} | tr A-Z a-z
} #}}}

# Check if the script is being run by root and exit.

if [[ $(echo "$USER") == *root* ]] ; then
	echo 
	echo "Attempting to run as root forbidden for auditing purposes."
exit
fi

#command needs to be run with SOME input - exits if run without parameters

if [ $# = 0 ] ; then
        echo "Usage : kickcfg {hostname} {version} {customer} {build}	"
	echo
	echo "Note : If the hostname does not exist you will be prompted for the MAC Address."
	echo "To find out the version run the kickver script."
	echo "Pre-defined customers configs will be checked for & used if they exist."
	echo
        exit
fi

if [ "$BUILD" = "" ] ; then
echo "Usage : kickcfg {hostname} {version} {customer} {build} "
        echo
        echo "Build & version required, select below."
        ls /var/www/html/builds/$CUSTOMER	
	exit
fi



if [ "$OS" != "$OS2" ] ; then
    echo "looks like customer has upgraded since last time, before they were using $OS2. check which version is actually is and if its the newer one, youll need to run ksupdate, eg #ksupdate $2 $3 $4 (note - i havent written this yet, so you could just go edit /var/www/html/ksfiles/$3/$2.cfg for now but be careful if its a major upgrade rather than a minor"
    exit
fi



if [ "$CUSTOMER" = "" ] ; then
echo "Usage : kickcfg {hostname} {version} {customer} {build} "
        echo
        echo "Customer required, select customer below or add new customer."
	echo
	ls /var/www/html/builds/
	exit
fi

if [ ! -e "${BUILDDIR}/$3" ] ; then
        echo no customer of that name exists, try one of these
        ls $BUILDDIR
        exit
fi
# if the build for input field (eg rhel55x) doesnt exist it 
# exits as the configuration necessary
# to set that up isnt really part of the scope of this script 
# and should be tested independently once built

if [ ! -e "${BUILDDIR}/$3/$2" ] ; then
        echo "no custom build of this name exists, check list below to choose a different build, or  run kscreate to create one, or rerun command but with generic as the customer, eg #kickcfg $1 generic $3"
	echo
        echo 
        echo "Available builds below"
        ls $BUILDDIR/$CUSTOMER/
	echo
	echo
exit
fi

echo $SERVER $BUILD $CUSTOMER

# Check to see if we're going to be using custom scripts for the customer
# if so then set the build working directory to the specific customer.

#if [ -e "$BUILDDIR/$CUSTOMER" ] ; then
#	ORIGBUILD=$BUILDDIR
#	BUILDDIR=$BUILDDIR/$CUSTOMER
#	if [ ! -e "${BUILDDIR}/$2" ] ; then
#		cp $ORIGBUILD/$2 $BUILDDIR/$2	
#		echo
#        	echo 'New Build' $BUILD 'for' $CUSTOMER 'using generic build.'
#		echo 'To customize edit:' $BUILDDIR'/'$2
#		echo
#exit
#fi
#fi

#if [ -e "/var/www/html/ksfiles/customer/$CUSTOMER" ] ; then
#        KSFILES="ksfiles\/customer\/$CUSTOMER"
#fi


# this bit is basically to capture if people enter eg cv07_3 or cv7_3
# it takes input and prints the 3rd character
# if its zero then it uses zero as a delimiter therefore removing it from output
# and if its not a zero it passes input straight to output

notzero=$(echo $SERVER | awk '{print(substr($1,3,1))}')

if [ $notzero -eq 0 ] ; then
	NEWSERVER=$(echo $1 | awk -F0 '{print $1$2}')
	SERVER=$NEWSERVER
fi



# looks for SERVER to see if been kickstarted before - 
# if its file doesnt exists then prompts to create
# then it reads input and if its 12 characters then it 
# substitutes a dash between each two characters
# then creates a mac-address-file in the pxelinux.cfg directory 
# and a symbolic link with SERVER to it in the
# pxebuilds directory
# 
# adds the SERVER and the mac address with dashes to a file under root
# and also adds the SERVER, build, date, team member and 
# customer to a lastkicked file - it also converts 
# dashes to colons as the 

if [ ! -e "${PXE}/${SERVER}" ] ; then

     echo
     echo
     echo "this server is unknown, please run following command to add the server, then rerun kickcfg command"
     echo
     echo
     echo "#serveradd $1 mac-address"
     echo
     echo
     exit
#
#      printf "$SERVER hasn't been kickstarted before. Create pxefile? ([Y]/n) "
#      read res
#      	if [ "${res}" = "" -o "`lowercase ${res}`" = "y" ]; then
#      		echo -n "Enter MAC address of $SERVER?"
#      		read MAC 
#  	fi 
##
#	if [ "$(echo "$MAC" | wc -m)" -eq 13 ] ; then
#		ADDRESS=$(echo $MAC | tr A-Z a-z | awk '{print(substr($0,0,2))"-"(substr($0,3,2))"-"(substr($0,5,2))"-"(substr($0,7,2))"-"(substr($0,9,2))"-"(substr($0,11,2))}')
#		#ADDRESS=$(echo $MAC | tr A-Z a-z | tr \: \-)
#		touch ${TFTP}/01-${ADDRESS}
#		ln -fs ${TFTP}/01-${ADDRESS} ${PXE}/$SERVER
#
#		echo creating new kickstart file for $SERVER and $BUILD
#		echo $SERVER `changeit $ADDRESS`   >> /var/www/html/pxefiles/.sungardservers
#		echo $SERVER $BUILD  $(date |awk '{print(substr($2,0,3),(substr($3,0,2)),(substr($4,0,5)),(substr($6,0,4)))}') $USER $CUSTOMER  >> /var/www/html/pxefiles/lastkicked
#
# this basically does same as previous section but if user input has 
# 17 characters it passes it straight
# to output as it assumes input contains the dashes between the characters
# if someone puts in colons instead of dashes it converts them to dashes 
# then passes the info to the files# called sungardservers and lastkicked
# it also converts the dashes to colons for the sungardservers file as 
# SERVER script on target box 
# prefers it that way
#
#	elif [ "$(echo "$MAC" | wc -m)" -eq 18 ] ; then
#		ADDRESS=$(echo $MAC | tr A-Z a-z | tr \: \-)
#		touch ${TFTP}/01-${ADDRESS}
#		ln -fs ${TFTP}/01-${ADDRESS} ${PXE}/$SERVER
#
#		echo creating new kickstart file for $SERVER and $BUILD
#		echo $SERVER `changeit $ADDRESS`  >> /var/www/html/pxefiles/.sungardservers
#		echo $SERVER $2  $(date |awk '{print(substr($2,0,3),(substr($3,0,2)),(substr($4,0,5)),(substr($6,0,4)))}') $USER $CUSTOMER  >> /var/www/html/pxefiles/lastkicked
#	else
#		echo  "Illegal MAC address supplied."
#		exit
#	fi
#	else
#		echo creating new kickstart file for $SERVER and $BUILD
#		echo $SERVER $BUILD $(date |awk '{print(substr($2,0,3),(substr($3,0,2)),(substr($4,0,5)),(substr($6,0,4)))}') $USER $CUSTOMER  >> /var/www/html/pxefiles/lastkicked
	fi



case $BUILD in
        #"$BUILD")      cat $BUILDDIR/"$BUILD" | sed -e 's/ksfiles/'$KSFILES'/' > $PXE/"$SERVER"
        "$BUILD")      cat $BUILDDIR/$CUSTOMER/"$BUILD" > $PXE/"$SERVER"
esac


